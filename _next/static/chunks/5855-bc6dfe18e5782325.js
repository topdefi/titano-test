"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5855],{89744:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS=t.GENERIC_GAS_LIMIT_ORDER_EXECUTION=t.NATIVE_WRAPPED_TOKEN_ADDRESS=t.NATIVE_TOKEN_NAME=t.NATIVE_WRAPPED_TOKEN_TICKER=t.NATIVE_TOKEN_TICKER=t.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER=t.GELATO_LIMIT_ORDERS_MODULE_FLASHBOTS_ADDRESS=t.GELATO_LIMIT_ORDERS_MODULE_ADDRESS=t.GELATO_LIMIT_ORDERS_ADDRESS=t.SUBGRAPH_URL=t.OLD_SUBGRAPH_URL=t.NETWORK_STOP_LIMIT_HANDLERS=t.NETWORK_HANDLERS=t.NETWORK_NAME=t.HANDLERS_ADDRESSES=t.LIMIT_ORDER_SLIPPAGE=t.STOP_LIMIT_SLIPPAGE_BPS=t.BPS_GELATO_FEE=t.CHAIN_ID=t.MAX_LIFETIME_IN_SECONDS=t.SLIPPAGE_BPS=t.ETH_ADDRESS=void 0,t.ETH_ADDRESS="0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",t.SLIPPAGE_BPS=40,t.MAX_LIFETIME_IN_SECONDS=7889238,t.CHAIN_ID={MAINNET:1,ROPSTEN:3,GOERLI:5,CRONOS:25,BSC:56,MATIC:137,FANTOM:250,AVAX:43114},t.BPS_GELATO_FEE={[t.CHAIN_ID.MAINNET]:10,[t.CHAIN_ID.MATIC]:10,[t.CHAIN_ID.FANTOM]:10,[t.CHAIN_ID.BSC]:10,[t.CHAIN_ID.AVAX]:10,[t.CHAIN_ID.CRONOS]:10},t.STOP_LIMIT_SLIPPAGE_BPS={[t.CHAIN_ID.MAINNET]:500,[t.CHAIN_ID.ROPSTEN]:500,[t.CHAIN_ID.MATIC]:500,[t.CHAIN_ID.FANTOM]:500,[t.CHAIN_ID.BSC]:500,[t.CHAIN_ID.AVAX]:500,[t.CHAIN_ID.CRONOS]:500},t.LIMIT_ORDER_SLIPPAGE={[t.CHAIN_ID.MAINNET]:40,[t.CHAIN_ID.ROPSTEN]:40,[t.CHAIN_ID.MATIC]:40,[t.CHAIN_ID.FANTOM]:40,[t.CHAIN_ID.BSC]:40,[t.CHAIN_ID.AVAX]:40,[t.CHAIN_ID.CRONOS]:40},t.HANDLERS_ADDRESSES={[t.CHAIN_ID.MAINNET]:{uniswap:"0x837c03414fb86861f28ca7e91e5fd770fda0f52d",uniswap_stoplimit:"0xf437a1a98566872f734bd18addf4bb610d1f887b"},[t.CHAIN_ID.ROPSTEN]:{uniswap:"0x1f397f95d31eb20183b69d685a5060cfdefd508b",quickswap_stoplimit:"0x87bE4Eb9dFb2DefcEA035D3010f33584Fc8ddDB5"},[t.CHAIN_ID.MATIC]:{quickswap:"0xaccbd2c6ad75ad3394dc5f4b1f606bf111e4eae3",polydex:"0x00fc86d360162e4672ec6B427E12ed36F39f1f53",cafeswap:"0xd167afcee4e9a89e69646fd3c27e58b61d1b7f97",quickswap_stoplimit:"0x51cc226648f8de65513de7cdfd3e7b116156234e"},[t.CHAIN_ID.FANTOM]:{spiritswap:"0x5fb00386558ccc219e51b69d8e963ef20b0c267a",spookyswap:"0x228ffd7122d202c0cd24330892881c47b0817c7a",bombswap:"0x87C4Fbd67f6DD8a1B5EFD9879956c728C97afeFe",defyswap:"0x3d401587320522a5e0bb973d10a852430a8edbbd",tombswap:"0xc72ef1bae14d0be7ec28c149e5e24659115f7c90",protofi:"0xfd2c20e265c130dc01d5cacc3012d3205e49c8b5",spiritswap_stoplimit:"0x6ea82c72732389c5149326e048a46be9f8bec8e8",spookyswap_stoplimit:"0xe912cd26c4a4cfffc175a297f1328ab23313a1a7"},[t.CHAIN_ID.BSC]:{pancakeswap:"0x88f8CCC064bA2D39cF08D57B6e7504a7B6bE8E4e",pancakeswap_stoplimit:"0x84b826bcd26f1bc0cd5fbbdef7f5b8965d6bbb38"},[t.CHAIN_ID.AVAX]:{traderjoe:"0x88f8CCC064bA2D39cF08D57B6e7504a7B6bE8E4e",pangolin:"0x8b206547cfe6f35a77ddab2d6d97260765a349ef",pangolin_stoplimit:"0xb4c53e2e32caf977d61a8a776bdc44837a5d0d91",traderjoe_stoplimit:"0xcf497830e43836738bdd0c3d7e09b599ddf081b2"},[t.CHAIN_ID.CRONOS]:{vvsfinance:"0x6b9da2978ebe1c60d2cdaf52ee6c498cd8bb3f16",mmfinance:"0xee5154b3408e762d935f79ddef3a4ba56ac4d102"}},t.NETWORK_NAME={[t.CHAIN_ID.MAINNET]:"Ethereum",[t.CHAIN_ID.ROPSTEN]:"Ropsten",[t.CHAIN_ID.GOERLI]:"Goerli",[t.CHAIN_ID.MATIC]:"Polygon (Matic)",[t.CHAIN_ID.FANTOM]:"FANTOM",[t.CHAIN_ID.BSC]:"BSC",[t.CHAIN_ID.AVAX]:"AVAX",[t.CHAIN_ID.CRONOS]:"Cronos"},t.NETWORK_HANDLERS={[t.CHAIN_ID.MAINNET]:["uniswap","uniswap_stoplimit"],[t.CHAIN_ID.ROPSTEN]:["uniswap","quickswap_stoplimit"],[t.CHAIN_ID.MATIC]:["quickswap","polydex","cafeswap","quickswap_stoplimit"],[t.CHAIN_ID.FANTOM]:["spiritswap","spookyswap","bombswap","defyswap","tombswap","protofi","spiritswap_stoplimit","spookyswap_stoplimit"],[t.CHAIN_ID.BSC]:["pancakeswap","pancakeswap_stoplimit"],[t.CHAIN_ID.AVAX]:["traderjoe","pangolin","pangolin_stoplimit","traderjoe_stoplimit"],[t.CHAIN_ID.CRONOS]:["vvsfinance","mmfinance"]},t.NETWORK_STOP_LIMIT_HANDLERS={[t.CHAIN_ID.MAINNET]:["uniswap_stoplimit"],[t.CHAIN_ID.ROPSTEN]:["quickswap_stoplimit"],[t.CHAIN_ID.MATIC]:["quickswap_stoplimit"],[t.CHAIN_ID.BSC]:["pancakeswap_stoplimit"],[t.CHAIN_ID.FANTOM]:["spookyswap_stoplimit","spiritswap_stoplimit"],[t.CHAIN_ID.AVAX]:["traderjoe_stoplimit","pangolin_stoplimit"]},t.OLD_SUBGRAPH_URL={[t.CHAIN_ID.MAINNET]:"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders",[t.CHAIN_ID.ROPSTEN]:"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-ropsten",[t.CHAIN_ID.MATIC]:"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-polygon",[t.CHAIN_ID.FANTOM]:"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-fantom"},t.SUBGRAPH_URL={[t.CHAIN_ID.MAINNET]:"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-ii",[t.CHAIN_ID.MATIC]:"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-polygon-ii",[t.CHAIN_ID.FANTOM]:"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-fantom-ii",[t.CHAIN_ID.BSC]:"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-bsc",[t.CHAIN_ID.AVAX]:"https://api.thegraph.com/subgraphs/name/gelatodigital/limit-orders-avax",[t.CHAIN_ID.CRONOS]:"https://graph.cronoslabs.com/subgraphs/name/gelatonetwork/limit-orders-cronos"},t.GELATO_LIMIT_ORDERS_ADDRESS={[t.CHAIN_ID.MAINNET]:"0x36049D479A97CdE1fC6E2a5D2caE30B666Ebf92B",[t.CHAIN_ID.ROPSTEN]:"0x0e5096D201Fe2985f5C26432A76f145D6e5D1453",[t.CHAIN_ID.GOERLI]:"0xa0453c6ab71fe3da89640ee2503326bd0899a589",[t.CHAIN_ID.MATIC]:"0x38c4092b28dAB7F3d98eE6524549571c283cdfA5",[t.CHAIN_ID.FANTOM]:"0x05Ad1094Eb6Cde564d732196F6754Ee464896031",[t.CHAIN_ID.BSC]:"0x0c30D3d66bc7C73A83fdA929888c34dcb24FD599",[t.CHAIN_ID.AVAX]:"0x0c30D3d66bc7C73A83fdA929888c34dcb24FD599",[t.CHAIN_ID.CRONOS]:"0x5d41545c190637b9337ec5ffa89bac5ee0cb3a4c"},t.GELATO_LIMIT_ORDERS_MODULE_ADDRESS={[t.CHAIN_ID.MAINNET]:"0x037fc8e71445910e1E0bBb2a0896d5e9A7485318",[t.CHAIN_ID.ROPSTEN]:"0x3f3C13b09B601fb6074124fF8D779d2964caBf8B",[t.CHAIN_ID.GOERLI]:"0xCf8EDB3333Fae73b23f689229F4De6Ac95d1f707",[t.CHAIN_ID.MATIC]:"0x5A36178E38864F5E724A2DaF5f9cD9bA473f7903",[t.CHAIN_ID.FANTOM]:"0xf2253BF9a0BD002300cFe6f4E630d755669f6DCa",[t.CHAIN_ID.BSC]:"0xb7499a92fc36e9053a4324aFfae59d333635D9c3",[t.CHAIN_ID.AVAX]:"0xb7499a92fc36e9053a4324aFfae59d333635D9c3",[t.CHAIN_ID.CRONOS]:"0xf437a1a98566872f734BD18aDdF4BB610D1F887b"},t.GELATO_LIMIT_ORDERS_MODULE_FLASHBOTS_ADDRESS={[t.CHAIN_ID.MAINNET]:"0xbeC333EDE1A0687D2b9624F8C073a54c93ba9777",[t.CHAIN_ID.GOERLI]:"0xCf8EDB3333Fae73b23f689229F4De6Ac95d1f707"},t.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER={[t.CHAIN_ID.MAINNET]:"0x5fb00386558ccc219e51b69d8e963ef20b0c267a",[t.CHAIN_ID.ROPSTEN]:"0x9c06ff386779cc2269d482bcecf2378a4ff5cb90",[t.CHAIN_ID.GOERLI]:"0x247A1306b6122ba28862b19a95004899db91f1b5",[t.CHAIN_ID.MATIC]:"0x16773FcA1bd726E1eafAB52699bcF738fE4AdF69",[t.CHAIN_ID.FANTOM]:"0x97C1af451407e266fD57168e61D4B5af31894244",[t.CHAIN_ID.BSC]:"0x64c7f3c2C19B41a6aD67bb5f4edc8EdbB3284F34",[t.CHAIN_ID.AVAX]:"0x3441456d5750f4a22b0DcBD434D99B97455B70Ac",[t.CHAIN_ID.CRONOS]:"0x260aB0aCb931D7Da784fC35c7E96c3B13213Abf1"},t.NATIVE_TOKEN_TICKER={[t.CHAIN_ID.MAINNET]:"ETH",[t.CHAIN_ID.ROPSTEN]:"ETH",[t.CHAIN_ID.GOERLI]:"ETH",[t.CHAIN_ID.MATIC]:"MATIC",[t.CHAIN_ID.FANTOM]:"FTM",[t.CHAIN_ID.BSC]:"BNB",[t.CHAIN_ID.AVAX]:"AVAX",[t.CHAIN_ID.CRONOS]:"CRO"},t.NATIVE_WRAPPED_TOKEN_TICKER={[t.CHAIN_ID.MAINNET]:"WETH",[t.CHAIN_ID.ROPSTEN]:"WETH",[t.CHAIN_ID.GOERLI]:"WETH",[t.CHAIN_ID.MATIC]:"WMATIC",[t.CHAIN_ID.FANTOM]:"WFTM",[t.CHAIN_ID.BSC]:"WBNB",[t.CHAIN_ID.AVAX]:"WAVAX",[t.CHAIN_ID.CRONOS]:"WCRO"},t.NATIVE_TOKEN_NAME={[t.CHAIN_ID.MAINNET]:"Ether",[t.CHAIN_ID.ROPSTEN]:"Ether",[t.CHAIN_ID.GOERLI]:"Ether",[t.CHAIN_ID.MATIC]:"Matic",[t.CHAIN_ID.FANTOM]:"Fantom",[t.CHAIN_ID.BSC]:"Bnb",[t.CHAIN_ID.AVAX]:"Avax",[t.CHAIN_ID.CRONOS]:"Cronos"},t.NATIVE_WRAPPED_TOKEN_ADDRESS={[t.CHAIN_ID.MAINNET]:"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",[t.CHAIN_ID.ROPSTEN]:"0xc778417e063141139fce010982780140aa0cd5ab",[t.CHAIN_ID.GOERLI]:"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",[t.CHAIN_ID.MATIC]:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",[t.CHAIN_ID.FANTOM]:"0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83",[t.CHAIN_ID.BSC]:"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",[t.CHAIN_ID.AVAX]:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",[t.CHAIN_ID.CRONOS]:"0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23"},t.GENERIC_GAS_LIMIT_ORDER_EXECUTION="400000",t.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS={[t.CHAIN_ID.MAINNET]:"0x260aB0aCb931D7Da784fC35c7E96c3B13213Abf1",[t.CHAIN_ID.ROPSTEN]:"0xDC41072F4aFE7e4a7ea0f21d13a92662Fe733C55",[t.CHAIN_ID.MATIC]:"0x81967ac4ce8e2d94f7e4b4cf3d2e760605079604",[t.CHAIN_ID.BSC]:"0xe912cd26c4a4cfffc175a297f1328ab23313a1a7",[t.CHAIN_ID.FANTOM]:"0xf437a1a98566872f734bd18addf4bb610d1f887b",[t.CHAIN_ID.AVAX]:"0xf437a1a98566872f734bd18addf4bb610d1f887b",[t.CHAIN_ID.CRONOS]:""}},98081:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.ERC20OrderRouter__factory=void 0;const n=r(10408),i=[{inputs:[{internalType:"contract IGelatoPineCore",name:"_gelatoPineCore",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"key",type:"bytes32"},{indexed:!0,internalType:"address",name:"caller",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"address",name:"module",type:"address"},{indexed:!1,internalType:"address",name:"inputToken",type:"address"},{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"address",name:"witness",type:"address"},{indexed:!1,internalType:"bytes",name:"data",type:"bytes"},{indexed:!1,internalType:"bytes32",name:"secret",type:"bytes32"}],name:"DepositToken",type:"event"},{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"address",name:"_module",type:"address"},{internalType:"address",name:"_inputToken",type:"address"},{internalType:"address payable",name:"_owner",type:"address"},{internalType:"address",name:"_witness",type:"address"},{internalType:"bytes",name:"_data",type:"bytes"},{internalType:"bytes32",name:"_secret",type:"bytes32"}],name:"depositToken",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"gelatoPineCore",outputs:[{internalType:"contract IGelatoPineCore",name:"",type:"address"}],stateMutability:"view",type:"function"}];class a{static createInterface(){return new n.utils.Interface(i)}static connect(e,t){return new n.Contract(e,i,t)}}t.ERC20OrderRouter__factory=a,a.abi=i},99272:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.ERC20__factory=void 0;const n=r(10408),i=[{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_spender",type:"address"},{name:"_value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint8"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"balance",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{payable:!0,stateMutability:"payable",type:"fallback"},{anonymous:!1,inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"spender",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Transfer",type:"event"}];class a{static createInterface(){return new n.utils.Interface(i)}static connect(e,t){return new n.Contract(e,i,t)}}t.ERC20__factory=a,a.abi=i},23744:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.GelatoLimitOrders__factory=void 0;const n=r(10408),i=[{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"_key",type:"bytes32"},{indexed:!0,internalType:"address",name:"_caller",type:"address"},{indexed:!1,internalType:"uint256",name:"_amount",type:"uint256"},{indexed:!1,internalType:"bytes",name:"_data",type:"bytes"}],name:"DepositETH",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"_key",type:"bytes32"},{indexed:!1,internalType:"address",name:"_inputToken",type:"address"},{indexed:!1,internalType:"address",name:"_owner",type:"address"},{indexed:!1,internalType:"address",name:"_witness",type:"address"},{indexed:!1,internalType:"bytes",name:"_data",type:"bytes"},{indexed:!1,internalType:"uint256",name:"_amount",type:"uint256"}],name:"OrderCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"_key",type:"bytes32"},{indexed:!1,internalType:"address",name:"_inputToken",type:"address"},{indexed:!1,internalType:"address",name:"_owner",type:"address"},{indexed:!1,internalType:"address",name:"_witness",type:"address"},{indexed:!1,internalType:"bytes",name:"_data",type:"bytes"},{indexed:!1,internalType:"bytes",name:"_auxData",type:"bytes"},{indexed:!1,internalType:"uint256",name:"_amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_bought",type:"uint256"}],name:"OrderExecuted",type:"event"},{inputs:[],name:"ETH_ADDRESS",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract IModule",name:"_module",type:"address"},{internalType:"contract IERC20",name:"_inputToken",type:"address"},{internalType:"address payable",name:"_owner",type:"address"},{internalType:"address",name:"_witness",type:"address"},{internalType:"bytes",name:"_data",type:"bytes"},{internalType:"bytes",name:"_auxData",type:"bytes"}],name:"canExecuteOrder",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract IModule",name:"_module",type:"address"},{internalType:"contract IERC20",name:"_inputToken",type:"address"},{internalType:"address payable",name:"_owner",type:"address"},{internalType:"address",name:"_witness",type:"address"},{internalType:"bytes",name:"_data",type:"bytes"}],name:"cancelOrder",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"decodeOrder",outputs:[{internalType:"address",name:"module",type:"address"},{internalType:"address",name:"inputToken",type:"address"},{internalType:"address payable",name:"owner",type:"address"},{internalType:"address",name:"witness",type:"address"},{internalType:"bytes",name:"data",type:"bytes"},{internalType:"bytes32",name:"secret",type:"bytes32"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"depositEth",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"_module",type:"address"},{internalType:"address",name:"_inputToken",type:"address"},{internalType:"address payable",name:"_owner",type:"address"},{internalType:"address",name:"_witness",type:"address"},{internalType:"bytes",name:"_data",type:"bytes"},{internalType:"bytes32",name:"_secret",type:"bytes32"}],name:"encodeEthOrder",outputs:[{internalType:"bytes",name:"",type:"bytes"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"contract IModule",name:"_module",type:"address"},{internalType:"contract IERC20",name:"_inputToken",type:"address"},{internalType:"address payable",name:"_owner",type:"address"},{internalType:"address",name:"_witness",type:"address"},{internalType:"bytes",name:"_data",type:"bytes"},{internalType:"bytes32",name:"_secret",type:"bytes32"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"encodeTokenOrder",outputs:[{internalType:"bytes",name:"",type:"bytes"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"ethDeposits",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract IModule",name:"_module",type:"address"},{internalType:"contract IERC20",name:"_inputToken",type:"address"},{internalType:"address payable",name:"_owner",type:"address"},{internalType:"bytes",name:"_data",type:"bytes"},{internalType:"bytes",name:"_signature",type:"bytes"},{internalType:"bytes",name:"_auxData",type:"bytes"}],name:"executeOrder",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IModule",name:"_module",type:"address"},{internalType:"contract IERC20",name:"_inputToken",type:"address"},{internalType:"address payable",name:"_owner",type:"address"},{internalType:"address",name:"_witness",type:"address"},{internalType:"bytes",name:"_data",type:"bytes"}],name:"existOrder",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract IModule",name:"_module",type:"address"},{internalType:"contract IERC20",name:"_inputToken",type:"address"},{internalType:"address payable",name:"_owner",type:"address"},{internalType:"address",name:"_witness",type:"address"},{internalType:"bytes",name:"_data",type:"bytes"}],name:"keyOf",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"contract IModule",name:"_module",type:"address"},{internalType:"contract IERC20",name:"_inputToken",type:"address"},{internalType:"address payable",name:"_owner",type:"address"},{internalType:"address",name:"_witness",type:"address"},{internalType:"bytes",name:"_data",type:"bytes"}],name:"vaultOfOrder",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}];class a{static createInterface(){return new n.utils.Interface(i)}static connect(e,t){return new n.Contract(e,i,t)}}t.GelatoLimitOrders__factory=a,a.abi=i},82354:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.Multicall__factory=void 0;const n=r(10408),i=[{inputs:[{internalType:"address",name:"_factory",type:"address"},{internalType:"address",name:"_mainModule",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"_wallet",type:"address"},{indexed:!0,internalType:"bytes32",name:"_imageHash",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"_threshold",type:"uint256"},{indexed:!1,internalType:"bytes",name:"_signers",type:"bytes"}],name:"RequiredConfig",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"_wallet",type:"address"},{indexed:!0,internalType:"address",name:"_signer",type:"address"}],name:"RequiredSigner",type:"event"},{inputs:[{internalType:"address",name:"_addr",type:"address"}],name:"callBalanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"callBlockNumber",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_i",type:"uint256"}],name:"callBlockhash",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"callChainId",outputs:[{internalType:"uint256",name:"id",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"address",name:"_addr",type:"address"}],name:"callCode",outputs:[{internalType:"bytes",name:"code",type:"bytes"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_addr",type:"address"}],name:"callCodeHash",outputs:[{internalType:"bytes32",name:"codeHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_addr",type:"address"}],name:"callCodeSize",outputs:[{internalType:"uint256",name:"size",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"callCoinbase",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"callDifficulty",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"callGasLeft",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"callGasLimit",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"callGasPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"callOrigin",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"callTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"lastSignerUpdate",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"lastWalletUpdate",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"bool",name:"delegateCall",type:"bool"},{internalType:"bool",name:"revertOnError",type:"bool"},{internalType:"uint256",name:"gasLimit",type:"uint256"},{internalType:"address",name:"target",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct IModuleCalls.Transaction[]",name:"_txs",type:"tuple[]"}],name:"multiCall",outputs:[{internalType:"bool[]",name:"_successes",type:"bool[]"},{internalType:"bytes[]",name:"_results",type:"bytes[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"_wallet",type:"address"},{internalType:"uint256",name:"_threshold",type:"uint256"},{components:[{internalType:"uint256",name:"weight",type:"uint256"},{internalType:"address",name:"signer",type:"address"}],internalType:"struct RequireUtils.Member[]",name:"_members",type:"tuple[]"},{internalType:"bool",name:"_index",type:"bool"}],name:"publishConfig",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_wallet",type:"address"},{internalType:"bytes32",name:"_hash",type:"bytes32"},{internalType:"uint256",name:"_sizeMembers",type:"uint256"},{internalType:"bytes",name:"_signature",type:"bytes"},{internalType:"bool",name:"_index",type:"bool"}],name:"publishInitialSigners",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_wallet",type:"address"},{internalType:"uint256",name:"_nonce",type:"uint256"}],name:"requireMinNonce",outputs:[],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_expiration",type:"uint256"}],name:"requireNonExpired",outputs:[],stateMutability:"view",type:"function"}];class a{static createInterface(){return new n.utils.Interface(i)}static connect(e,t){return new n.Contract(e,i,t)}}t.Multicall__factory=a,a.abi=i},16060:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.Multicall__factory=t.GelatoLimitOrders__factory=t.ERC20OrderRouter__factory=t.ERC20__factory=void 0;var n=r(99272);Object.defineProperty(t,"ERC20__factory",{enumerable:!0,get:function(){return n.ERC20__factory}});var i=r(98081);Object.defineProperty(t,"ERC20OrderRouter__factory",{enumerable:!0,get:function(){return i.ERC20OrderRouter__factory}});var a=r(23744);Object.defineProperty(t,"GelatoLimitOrders__factory",{enumerable:!0,get:function(){return a.GelatoLimitOrders__factory}});var s=r(82354);Object.defineProperty(t,"Multicall__factory",{enumerable:!0,get:function(){return s.Multicall__factory}})},74782:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.constants=t.utils=t.isEthereumChain=t.GelatoStopLimitOrders=t.isValidChainIdAndHandler=t.GelatoLimitOrders=void 0;const n=r(70655);var i=r(78905);Object.defineProperty(t,"GelatoLimitOrders",{enumerable:!0,get:function(){return i.GelatoLimitOrders}}),Object.defineProperty(t,"isValidChainIdAndHandler",{enumerable:!0,get:function(){return i.isValidChainIdAndHandler}});var a=r(45741);Object.defineProperty(t,"GelatoStopLimitOrders",{enumerable:!0,get:function(){return a.GelatoStopLimitOrders}});var s=r(41153);Object.defineProperty(t,"isEthereumChain",{enumerable:!0,get:function(){return s.isEthereumChain}}),n.__exportStar(r(82938),t),t.utils=n.__importStar(r(41153)),t.constants=n.__importStar(r(89744))},78905:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.GelatoLimitOrders=t.isFlashbotsCompatibleChainId=t.isValidChainIdAndHandler=void 0;const n=r(70655),i=r(10408),a=r(81556),s=r(48088),o=r(89744),d=r(16060),u=r(40615),_=r(41153);t.isValidChainIdAndHandler=(e,t)=>o.NETWORK_HANDLERS[e].includes(t);t.isFlashbotsCompatibleChainId=e=>e==o.CHAIN_ID.MAINNET||e==o.CHAIN_ID.GOERLI;t.GelatoLimitOrders=class{constructor(e,r,n,u=!1,_){var l;if(n&&!(0,t.isValidChainIdAndHandler)(e,n))throw new Error("Invalid chainId and handler");if(u&&(n||!(0,t.isFlashbotsCompatibleChainId)(e)))throw new Error("Invalid chainId or handler for Flashbots bundle submission. handler must be undefined, and chainId either 1 (mainnet) or 5 (goerli)");this._chainId=e,this._gelatoFeeBPS=o.BPS_GELATO_FEE[e],this._slippageBPS=o.LIMIT_ORDER_SLIPPAGE[e],this._subgraphUrl=null!==_&&void 0!==_?_:o.SUBGRAPH_URL[e],this._signer=s.Signer.isSigner(r)?r:void 0,this._provider=a.Provider.isProvider(r)?r:s.Signer.isSigner(r)?r.provider:void 0,this._gelatoLimitOrders=this._signer?d.GelatoLimitOrders__factory.connect(o.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId],this._signer):this._provider?d.GelatoLimitOrders__factory.connect(o.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId],this._provider):new i.Contract(o.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId],d.GelatoLimitOrders__factory.createInterface()),this._moduleAddress=u?o.GELATO_LIMIT_ORDERS_MODULE_FLASHBOTS_ADDRESS[this._chainId]:o.GELATO_LIMIT_ORDERS_MODULE_ADDRESS[this._chainId],this._handler=n,this._handlerAddress=n?null===(l=o.HANDLERS_ADDRESSES[this._chainId][n])||void 0===l?void 0:l.toLowerCase():void 0,this._isFlashbotsProtected=u,this._abiEncoder=new i.utils.AbiCoder,this._erc20OrderRouter=this._signer?d.ERC20OrderRouter__factory.connect(o.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId],this._signer):this._provider?d.ERC20OrderRouter__factory.connect(o.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId],this._provider):new i.Contract(o.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId],d.ERC20OrderRouter__factory.createInterface())}get gelatoFeeBPS(){return this._gelatoFeeBPS}get slippageBPS(){return this._slippageBPS}get chainId(){return this._chainId}get signer(){return this._signer}get provider(){return this._provider}get subgraphUrl(){return this._subgraphUrl}set subgraphUrl(e){this._subgraphUrl=e}get handler(){return this._handler}get handlerAddress(){return this._handlerAddress}get moduleAddress(){return this._moduleAddress}get contract(){return this._gelatoLimitOrders}get erc20OrderRouter(){return this._erc20OrderRouter}get isFlashbotsProtected(){return this._isFlashbotsProtected}encodeLimitOrderSubmission(e,t,r,i,a,s=!0){return n.__awaiter(this,void 0,void 0,(function*(){const{payload:n}=yield this.encodeLimitOrderSubmissionWithSecret(e,t,r,i,a,s);return n}))}encodeLimitOrderSubmissionWithSecret(e,t,r,a,s,o=!0){var d;return n.__awaiter(this,void 0,void 0,(function*(){const n=`0x67656c61746f6e6574776f726b${i.utils.hexlify(i.utils.randomBytes(19)).replace("0x","")}`,{privateKey:u,address:_}=new i.Wallet(n),{minReturn:l}=this.getFeeAndSlippageAdjustedMinReturn(a),p=yield this._encodeSubmitData(e,t,s,_,r,l,u,o),c=this._handlerAddress?this._abiEncoder.encode(["address","uint256","address"],[t,l,this._handlerAddress]):this._abiEncoder.encode(["address","uint256"],[t,l]);return{payload:p,secret:u,witness:_,order:{id:this._getKey({module:this._moduleAddress,inputToken:e,owner:s,witness:_,data:c}),module:this._moduleAddress.toLowerCase(),data:c,inputToken:e.toLowerCase(),outputToken:t.toLowerCase(),owner:s.toLowerCase(),witness:_.toLowerCase(),inputAmount:r.toString(),minReturn:l.toString(),adjustedMinReturn:a.toString(),inputData:p.data.toString(),secret:u.toLowerCase(),handler:null!==(d=this._handlerAddress)&&void 0!==d?d:null}}}))}submitLimitOrder(e,t,r,a,s=!0,o){return n.__awaiter(this,void 0,void 0,(function*(){if(!this._signer)throw new Error("No signer");const n=yield this._signer.getAddress(),d=yield this.encodeLimitOrderSubmission(e,t,r,a,n,s);return this._signer.sendTransaction(Object.assign(Object.assign({},o),{to:d.to,data:d.data,value:i.BigNumber.from(d.value)}))}))}encodeLimitOrderCancellation(e,t){return n.__awaiter(this,void 0,void 0,(function*(){if(!this._gelatoLimitOrders)throw new Error("No gelato limit orders contract");if(!e.inputToken)throw new Error("No input token in order");if(!e.witness)throw new Error("No witness in order");if(!e.outputToken)throw new Error("No output token in order");if(!e.minReturn)throw new Error("No minReturn in order");if(!e.owner)throw new Error("No owner");if(!e.module)throw new Error("No module in order");if(t){if(!(yield this.isActiveOrder(e)))throw new Error("Order not found. Please review your order data.")}return{data:this._gelatoLimitOrders.interface.encodeFunctionData("cancelOrder",[e.module,e.inputToken,e.owner,e.witness,e.data]),to:this._gelatoLimitOrders.address,value:i.constants.Zero}}))}cancelLimitOrder(e,t,r){return n.__awaiter(this,void 0,void 0,(function*(){if(!this._signer)throw new Error("No signer");if(!this._gelatoLimitOrders)throw new Error("No gelato limit orders contract");let n=e;if(e.id)try{const t=yield Promise.race([this.getOrder(e.id),new Promise((e=>setTimeout(e,5e3))).then((()=>{throw new Error("Timeout")}))]);if(t){if("cancelled"===t.status)throw new Error(`Order status is not open. Current order status: ${t.status}. Cancellation transaction hash: ${t.cancelledTxHash}`);if("executed"===t.status)throw new Error(`Order status is not open. Current order status: ${t.status}. Execution transaction hash: ${t.executedTxHash}`);n=Object.assign(Object.assign({},e),t)}}catch(i){}if(!n.inputToken)throw new Error("No input token in order");if(!n.witness)throw new Error("No witness in order");if(!n.outputToken)throw new Error("No output token in order");if(!n.minReturn)throw new Error("No minReturn in order");if(!n.data)throw new Error("No data in order");if(!n.module)throw new Error("No module in order");if(t){if(!(yield this.isActiveOrder(n)))throw new Error("Order not found. Please review your order data.")}if((yield this._signer.getAddress()).toLowerCase()!==e.owner.toLowerCase())throw new Error("Owner and signer mismatch");return this._gelatoLimitOrders.cancelOrder(n.module,n.inputToken,n.owner,n.witness,n.data,null!==r&&void 0!==r?r:{gasLimit:(0,_.isEthereumChain)(this._chainId)?6e5:2e6})}))}approveTokenAmount(e,t,r){return n.__awaiter(this,void 0,void 0,(function*(){if(!this._signer)throw new Error("No signer");return r?d.ERC20__factory.connect(e,this._signer).approve(this._erc20OrderRouter.address,t,r):d.ERC20__factory.connect(e,this._signer).approve(this._erc20OrderRouter.address,t)}))}isActiveOrder(e){return n.__awaiter(this,void 0,void 0,(function*(){if(!this._provider)throw new Error("No provider");if(!this._gelatoLimitOrders)throw new Error("No gelato limit orders contract");if(!e.module)throw new Error("No module in order");if(!e.inputToken)throw new Error("No input token in order");if(!e.owner)throw new Error("No owner in order");if(!e.witness)throw new Error("No witness in order");if(!e.data)throw new Error("No data in order");return this._gelatoLimitOrders.existOrder(e.module,e.inputToken,e.owner,e.witness,e.data)}))}getExchangeRate(e,t,r,n,a=!1){const s=i.BigNumber.from(10).pow(i.BigNumber.from(18));return a?i.BigNumber.from(e).mul(s).div(r).mul(i.BigNumber.from(10).pow(i.BigNumber.from(n))).div(i.BigNumber.from(10).pow(i.BigNumber.from(t))).toString():i.BigNumber.from(r).mul(s).div(e).mul(i.BigNumber.from(10).pow(i.BigNumber.from(t))).div(i.BigNumber.from(10).pow(i.BigNumber.from(n))).toString()}getFeeAndSlippageAdjustedMinReturn(e,t){if(t&&!Number.isInteger(t))throw new Error("Extra Slippage BPS must an unsigned integer");const r=i.BigNumber.from(e).mul(this._gelatoFeeBPS).div(1e4).gte(1)?i.BigNumber.from(e).mul(this._gelatoFeeBPS).div(1e4):i.BigNumber.from(1),n=t?this._slippageBPS+t:this._slippageBPS,a=i.BigNumber.from(e).mul(n).div(1e4);return{minReturn:i.BigNumber.from(e).sub(r).sub(a).toString(),slippage:a.toString(),gelatoFee:r.toString()}}getAdjustedMinReturn(e,t){const r=i.BigNumber.from(this._gelatoFeeBPS),n=t?i.BigNumber.from(this._slippageBPS+t):i.BigNumber.from(this._slippageBPS),a=r.add(n);return i.BigNumber.from(e).mul(1e4).div(i.BigNumber.from(1e4).sub(a)).toString()}getExecutionPrice(e,t,r,n,a=!1){const s=i.BigNumber.from(10).pow(i.BigNumber.from(a?n:t));return a?i.BigNumber.from(e).mul(s).div(r).toString():i.BigNumber.from(r).mul(s).div(e).toString()}getOrder(e){return n.__awaiter(this,void 0,void 0,(function*(){const t=yield(0,u.queryOrder)(e,this._chainId);return t?Object.assign(Object.assign({},t),{adjustedMinReturn:this.getAdjustedMinReturn(t.minReturn)}):null}))}getOrders(e,t=!1){return n.__awaiter(this,void 0,void 0,(function*(){return(yield(0,u.queryOrders)(e,this._chainId)).map((e=>Object.assign(Object.assign({},e),{adjustedMinReturn:this.getAdjustedMinReturn(e.minReturn)}))).filter((e=>this._handler&&!e.handler?!!t:!this._handler||e.handler===this._handlerAddress))}))}getOpenOrders(e,t=!1){return n.__awaiter(this,void 0,void 0,(function*(){return(yield(0,u.queryOpenOrders)(e,this._chainId)).map((e=>Object.assign(Object.assign({},e),{adjustedMinReturn:this.getAdjustedMinReturn(e.minReturn)}))).filter((e=>this._handler&&!e.handler?!!t:!this._handler||e.handler===this._handlerAddress))}))}getPastOrders(e,t=!1){return n.__awaiter(this,void 0,void 0,(function*(){return(yield(0,u.queryPastOrders)(e,this._chainId)).map((e=>Object.assign(Object.assign({},e),{adjustedMinReturn:this.getAdjustedMinReturn(e.minReturn)}))).filter((e=>this._handler&&!e.handler?!!t:!this._handler||e.handler===this._handlerAddress))}))}getExecutedOrders(e,t=!1){return n.__awaiter(this,void 0,void 0,(function*(){return(yield(0,u.queryExecutedOrders)(e,this._chainId)).map((e=>Object.assign(Object.assign({},e),{adjustedMinReturn:this.getAdjustedMinReturn(e.minReturn)}))).filter((e=>this._handler&&!e.handler?!!t:!this._handler||e.handler===this._handlerAddress))}))}getCancelledOrders(e,t=!1){return n.__awaiter(this,void 0,void 0,(function*(){return(yield(0,u.queryCancelledOrders)(e,this._chainId)).map((e=>Object.assign(Object.assign({},e),{adjustedMinReturn:this.getAdjustedMinReturn(e.minReturn)}))).filter((e=>this._handler&&!e.handler?!!t:!this._handler||e.handler===this._handlerAddress))}))}_getKey(e){return i.utils.keccak256(this._abiEncoder.encode(["address","address","address","address","bytes"],[e.module,e.inputToken,e.owner,e.witness,e.data]))}_encodeSubmitData(e,t,r,a,s,u,l,p){return n.__awaiter(this,void 0,void 0,(function*(){if(!this._provider)throw new Error("No provider");if(e.toLowerCase()===t.toLowerCase())throw new Error("Input token and output token can not be equal");const n=this._handlerAddress?this._abiEncoder.encode(["address","uint256","address"],[t,u,this._handlerAddress]):this._abiEncoder.encode(["address","uint256"],[t,u]);let c,y,m;if((0,_.isNetworkGasToken)(e)){const e=yield this._gelatoLimitOrders.encodeEthOrder(this._moduleAddress,o.ETH_ADDRESS,r,a,n,l);c=this._gelatoLimitOrders.interface.encodeFunctionData("depositEth",[e]),y=s,m=this._gelatoLimitOrders.address}else{if(p){if((yield d.ERC20__factory.connect(e,this._provider).allowance(r,this._erc20OrderRouter.address)).lt(s))throw new Error("Insufficient token allowance for placing order")}c=this._erc20OrderRouter.interface.encodeFunctionData("depositToken",[s,this._moduleAddress,e,r,a,n,l]),y=i.constants.Zero,m=this._erc20OrderRouter.address}return{data:c,value:y,to:m}}))}}},50105:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.GelatoBase=t.isETHOrWETH=t.isFlashbotsCompatibleChainId=t.isValidChainIdAndHandler=void 0;const n=r(70655),i=r(10408),a=r(81556),s=r(48088),o=r(89744),d=r(16060),u=r(41153);t.isValidChainIdAndHandler=(e,t)=>o.NETWORK_HANDLERS[e].includes(t);t.isFlashbotsCompatibleChainId=e=>e==o.CHAIN_ID.MAINNET||e==o.CHAIN_ID.GOERLI;t.isETHOrWETH=(e,t)=>{const r=o.NATIVE_WRAPPED_TOKEN_ADDRESS[t];return e.toLowerCase()===o.ETH_ADDRESS.toLowerCase()||e.toLowerCase()===r.toLowerCase()};t.GelatoBase=class{constructor(e,r,n,u,_){if(u&&!(0,t.isValidChainIdAndHandler)(e,u))throw new Error("Invalid chainId and handler");this._chainId=e,this._gelatoFeeBPS=o.BPS_GELATO_FEE[e],this._slippageBPS=o.STOP_LIMIT_SLIPPAGE_BPS[e],this._subgraphUrl=o.SUBGRAPH_URL[e],this._signer=s.Signer.isSigner(n)?n:void 0,this._provider=a.Provider.isProvider(n)?n:s.Signer.isSigner(n)?n.provider:void 0,this._gelatoCore=this._signer?d.GelatoLimitOrders__factory.connect(o.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId],this._signer):this._provider?d.GelatoLimitOrders__factory.connect(o.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId],this._provider):new i.Contract(o.GELATO_LIMIT_ORDERS_ADDRESS[this._chainId],d.GelatoLimitOrders__factory.createInterface()),this._abiEncoder=new i.utils.AbiCoder,this._erc20OrderRouter=this._signer?d.ERC20OrderRouter__factory.connect(o.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId],this._signer):this._provider?d.ERC20OrderRouter__factory.connect(o.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId],this._provider):new i.Contract(o.GELATO_LIMIT_ORDERS_ERC20_ORDER_ROUTER[this._chainId],d.ERC20OrderRouter__factory.createInterface()),this._handler=u,this._handlerAddress=_,this._moduleAddress=r}get gelatoFeeBPS(){return this._gelatoFeeBPS}get slippageBPS(){return this._slippageBPS}get chainId(){return this._chainId}get signer(){return this._signer}get provider(){return this._provider}get subgraphUrl(){return this._subgraphUrl}get handler(){return this._handler}get handlerAddress(){return this._handlerAddress}get moduleAddress(){return this._moduleAddress}get contract(){return this._gelatoCore}get erc20OrderRouter(){return this._erc20OrderRouter}get abiEncoder(){return this._abiEncoder}encodeLimitOrderCancellation(e,t){return n.__awaiter(this,void 0,void 0,(function*(){if(!this._gelatoCore)throw new Error("No gelato limit orders contract");if(!e.inputToken)throw new Error("No input token in order");if(!e.witness)throw new Error("No witness in order");if(!e.outputToken)throw new Error("No output token in order");if(!e.minReturn)throw new Error("No minReturn in order");if(!e.owner)throw new Error("No owner");if(t){if(!(yield this.isActiveOrder(e)))throw new Error("Order not found. Please review your order data.")}return{data:this._gelatoCore.interface.encodeFunctionData("cancelOrder",[this._moduleAddress,e.inputToken,e.owner,e.witness,e.data]),to:this._gelatoCore.address,value:i.constants.Zero}}))}cancelStopLimitOrder(e,t,r){return n.__awaiter(this,void 0,void 0,(function*(){if(!this._signer)throw new Error("No signer");if(!this._gelatoCore)throw new Error("No gelato limit orders contract");if(!e.inputToken)throw new Error("No input token in order");if(!e.witness)throw new Error("No witness in order");if(!e.outputToken)throw new Error("No output token in order");if(!e.minReturn)throw new Error("No minReturn in order");if(!e.data)throw new Error("No data in order");if(t){if(!(yield this.isActiveOrder(e)))throw new Error("Order not found. Please review your order data.")}if((yield this._signer.getAddress()).toLowerCase()!==e.owner.toLowerCase())throw new Error("Owner and signer mismatch");return this._gelatoCore.cancelOrder(this._moduleAddress,e.inputToken,e.owner,e.witness,e.data,null!==r&&void 0!==r?r:{gasLimit:(0,u.isEthereumChain)(this._chainId)?5e5:15e5})}))}approveTokenAmount(e,t,r){return n.__awaiter(this,void 0,void 0,(function*(){if(!this._signer)throw new Error("No signer");return r?d.ERC20__factory.connect(e,this._signer).approve(this._erc20OrderRouter.address,t,r):d.ERC20__factory.connect(e,this._signer).approve(this._erc20OrderRouter.address,t)}))}isActiveOrder(e){return n.__awaiter(this,void 0,void 0,(function*(){if(!this._provider)throw new Error("No provider");if(!this._gelatoCore)throw new Error("No gelato limit orders contract");if(!e.module)throw new Error("No module in order");if(!e.inputToken)throw new Error("No input token in order");if(!e.owner)throw new Error("No owner in order");if(!e.witness)throw new Error("No witness in order");if(!e.data)throw new Error("No data in order");return this._gelatoCore.existOrder(e.module,e.inputToken,e.owner,e.witness,e.data)}))}getExchangeRate(e,t,r,n,a=!1){const s=i.BigNumber.from(10).pow(i.BigNumber.from(18));return a?i.BigNumber.from(e).mul(s).div(r).mul(i.BigNumber.from(10).pow(i.BigNumber.from(n))).div(i.BigNumber.from(10).pow(i.BigNumber.from(t))).toString():i.BigNumber.from(r).mul(s).div(e).mul(i.BigNumber.from(10).pow(i.BigNumber.from(t))).div(i.BigNumber.from(10).pow(i.BigNumber.from(n))).toString()}getFeeAndSlippageAdjustedMinReturn(e,t){if(t&&!Number.isInteger(t))throw new Error("Extra Slippage BPS must an unsigned integer");const r=i.BigNumber.from(e).mul(this._gelatoFeeBPS).div(1e4).gte(1)?i.BigNumber.from(e).mul(this._gelatoFeeBPS).div(1e4):i.BigNumber.from(1),n=t||this._slippageBPS,a=i.BigNumber.from(e).mul(n).div(1e4);return{minReturn:i.BigNumber.from(e).sub(r).sub(a).toString(),slippage:a.toString(),gelatoFee:r.toString()}}getAdjustedMinReturn(e,t){const r=i.BigNumber.from(this._gelatoFeeBPS),n=t?i.BigNumber.from(t):i.BigNumber.from(this._slippageBPS),a=r.add(n);return i.BigNumber.from(e).mul(1e4).div(i.BigNumber.from(1e4).sub(a)).toString()}getExecutionPrice(e,t,r,n,a=!1){const s=i.BigNumber.from(10).pow(i.BigNumber.from(a?n:t));return a?i.BigNumber.from(e).mul(s).div(r).toString():i.BigNumber.from(r).mul(s).div(e).toString()}_getKey(e){return i.utils.keccak256(this._abiEncoder.encode(["address","address","address","address","bytes"],[e.module,e.inputToken,e.owner,e.witness,e.data]))}_encodeSubmitData(e,t,r,a,s,_,l,p,c){return n.__awaiter(this,void 0,void 0,(function*(){if(!this.provider)throw new Error("No provider");if(!this.handlerAddress)throw new Error("No handlerAddress");if(e.toLowerCase()===t.toLowerCase())throw new Error("Input token and output token can not be equal");const n=this.abiEncoder.encode(["address","uint256","address","uint256"],[t,l,this.handlerAddress,_]);let y,m,h;if((0,u.isNetworkGasToken)(e)){const e=yield this.contract.encodeEthOrder(this.moduleAddress,o.ETH_ADDRESS,r,a,n,p);y=this.contract.interface.encodeFunctionData("depositEth",[e]),m=s,h=this.contract.address}else{if(c){if((yield d.ERC20__factory.connect(e,this.provider).allowance(r,this.erc20OrderRouter.address)).lt(s))throw new Error("Insufficient token allowance for placing order")}y=this.erc20OrderRouter.interface.encodeFunctionData("depositToken",[s,this.moduleAddress,e,r,a,n,p]),m=i.constants.Zero,h=this.erc20OrderRouter.address}return{data:y,value:m,to:h}}))}}},45741:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.GelatoStopLimitOrders=void 0;const n=r(70655),i=r(10408),a=r(89744),s=r(50105),o=r(73813);class d extends s.GelatoBase{constructor(e,t,r){var n;if(r&&!(0,s.isValidChainIdAndHandler)(e,r))throw new Error("Invalid chainId and handler");const i=a.NETWORK_STOP_LIMIT_HANDLERS[e];if(!r)throw new Error("No Handler defined");if(r&&!i.includes(r))throw new Error("Handler not supported");const o=a.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[e];if(!o)throw new Error("Invalid chainId and handler");super(e,o,t,r,null===(n=a.HANDLERS_ADDRESSES[e][r])||void 0===n?void 0:n.toLowerCase())}submitStopLimitOrder(e,t,r,a,s=!0,o){return n.__awaiter(this,void 0,void 0,(function*(){if(!this.signer)throw new Error("No signer");if(!a)throw new Error("No StopLimit defined");const n=yield this.signer.getAddress(),d=yield this.encodeStopLimitOrderSubmission(e,t,r,a,n,s);return this.signer.sendTransaction(Object.assign(Object.assign({},o),{to:d.to,data:d.data,value:i.BigNumber.from(d.value)}))}))}encodeStopLimitOrderSubmission(e,t,r,i,a,s=!0){return n.__awaiter(this,void 0,void 0,(function*(){const{payload:n}=yield this.encodeStopLimitOrderSubmissionWithSecret(e,t,r,i,a,s);return n}))}encodeStopLimitOrderSubmissionWithSecret(e,t,r,a,s,o=!0){var d;return n.__awaiter(this,void 0,void 0,(function*(){if(!a)throw new Error("No StopLimit defined");if(!this.handlerAddress)throw new Error("No handlerAddress");const n=`0x67656c61746f6e6574776f726b${i.utils.hexlify(i.utils.randomBytes(19)).replace("0x","")}`,{privateKey:u,address:_}=new i.Wallet(n),{minReturn:l}=this.getFeeAndSlippageAdjustedMinReturn(a),p=yield this._encodeSubmitData(e,t,s,_,r,a,l,u,o),c=this.abiEncoder.encode(["address","uint256","address","uint256"],[t,l,this.handlerAddress,a]);return{payload:p,secret:u,witness:_,order:{id:this._getKey({module:this.moduleAddress,inputToken:e,owner:s,witness:_,data:c}),module:this.moduleAddress.toLowerCase(),data:c,inputToken:e.toLowerCase(),outputToken:t.toLowerCase(),owner:s.toLowerCase(),witness:_.toLowerCase(),inputAmount:r.toString(),minReturn:l.toString(),maxReturn:a.toString(),adjustedMinReturn:a.toString(),inputData:p.data.toString(),secret:u.toLowerCase(),handler:null!==(d=this.handlerAddress)&&void 0!==d?d:null}}}))}getOpenStopLimitOrders(e){return n.__awaiter(this,void 0,void 0,(function*(){return(yield(0,o.queryStopLimitOrders)(e,this.chainId)).map((e=>Object.assign(Object.assign({},e),{adjustedMinReturn:this.getAdjustedMinReturn(e.minReturn)})))}))}getStopLimitOrders(e){return n.__awaiter(this,void 0,void 0,(function*(){return(yield(0,o.queryStopLimitOrders)(e,this.chainId)).map((e=>Object.assign(Object.assign({},e),{adjustedMinReturn:this.getAdjustedMinReturn(e.minReturn)})))}))}getExecutedStopLimitOrders(e){return n.__awaiter(this,void 0,void 0,(function*(){return(yield(0,o.queryStopLimitExecutedOrders)(e,this.chainId)).map((e=>Object.assign(Object.assign({},e),{adjustedMinReturn:this.getAdjustedMinReturn(e.minReturn)})))}))}getCancelledStopLimitOrders(e){return n.__awaiter(this,void 0,void 0,(function*(){return(yield(0,o.queryStopLimitCancelledOrders)(e,this.chainId)).map((e=>Object.assign(Object.assign({},e),{adjustedMinReturn:this.getAdjustedMinReturn(e.minReturn)})))}))}getPastStopLimitOrders(e){return n.__awaiter(this,void 0,void 0,(function*(){return(yield(0,o.queryPastOrders)(e,this.chainId)).map((e=>Object.assign(Object.assign({},e),{adjustedMinReturn:this.getAdjustedMinReturn(e.minReturn)})))}))}}t.GelatoStopLimitOrders=d},82938:function(e,t){Object.defineProperty(t,"__esModule",{value:!0})},41153:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.isEthereumChain=t.isTransactionCostDependentChain=t.isNetworkGasToken=t.queries=void 0;const n=r(70655),i=r(89744);t.queries=n.__importStar(r(39258));t.isNetworkGasToken=e=>e.toLowerCase()===i.ETH_ADDRESS.toLowerCase();t.isTransactionCostDependentChain=e=>{switch(e){case 1:case 3:case 5:case 25:case 56:case 250:case 43114:return!0;default:return!1}};t.isEthereumChain=e=>{switch(e){case 1:case 3:case 5:return!0;default:return!1}}},39258:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER=t.GET_ALL_CANCELLED_ORDERS_BY_OWNER=t.GET_ALL_EXECUTED_ORDERS_BY_OWNER=t.GET_ALL_PAST_ORDERS_BY_OWNER=t.GET_ALL_OPEN_ORDERS_BY_OWNER=t.GET_ALL_ORDERS_BY_OWNER=t.GET_ORDER_BY_ID=void 0;const n=r(28687);t.GET_ORDER_BY_ID=n.gql`
  query getOrdersByOwner($id: String) {
    orders(where: { id: $id }) {
      id
      owner
      inputToken
      outputToken
      minReturn
      module
      witness
      secret
      inputAmount
      vault
      bought
      auxData
      status
      createdTxHash
      executedTxHash
      cancelledTxHash
      blockNumber
      createdAt
      updatedAt
      updatedAtBlock
      updatedAtBlockHash
      data
      inputData
      handler
    }
  }
`,t.GET_ALL_ORDERS_BY_OWNER=n.gql`
  query getOrdersByOwner($owner: String) {
    orders(
      first: 1000
      orderBy: updatedAtBlock
      orderDirection: desc
      where: { owner: $owner }
    ) {
      id
      owner
      inputToken
      outputToken
      minReturn
      module
      witness
      secret
      inputAmount
      vault
      bought
      auxData
      status
      createdTxHash
      executedTxHash
      cancelledTxHash
      blockNumber
      createdAt
      updatedAt
      updatedAtBlock
      updatedAtBlockHash
      data
      inputData
      handler
    }
  }
`,t.GET_ALL_OPEN_ORDERS_BY_OWNER=n.gql`
  query getOpenOrdersByOwner($owner: String) {
    orders(
      first: 1000
      orderBy: updatedAtBlock
      orderDirection: desc
      where: { owner: $owner, status: open }
    ) {
      id
      owner
      inputToken
      outputToken
      minReturn
      module
      witness
      secret
      inputAmount
      vault
      bought
      auxData
      status
      createdTxHash
      executedTxHash
      cancelledTxHash
      blockNumber
      createdAt
      updatedAt
      updatedAtBlock
      updatedAtBlockHash
      data
      inputData
      handler
    }
  }
`,t.GET_ALL_PAST_ORDERS_BY_OWNER=n.gql`
  query getPastOrdersByOwner($owner: String) {
    orders(
      first: 1000
      orderBy: updatedAtBlock
      orderDirection: desc
      where: { owner: $owner, status_not: open }
    ) {
      id
      owner
      inputToken
      outputToken
      minReturn
      module
      witness
      secret
      inputAmount
      vault
      bought
      auxData
      status
      createdTxHash
      executedTxHash
      cancelledTxHash
      blockNumber
      createdAt
      updatedAt
      updatedAtBlock
      updatedAtBlockHash
      data
      inputData
      handler
    }
  }
`,t.GET_ALL_EXECUTED_ORDERS_BY_OWNER=n.gql`
  query getExecutedOrdersByOwner($owner: String) {
    orders(
      first: 1000
      orderBy: updatedAtBlock
      orderDirection: desc
      where: { owner: $owner, status: executed }
    ) {
      id
      owner
      inputToken
      outputToken
      minReturn
      module
      witness
      secret
      inputAmount
      vault
      bought
      auxData
      status
      createdTxHash
      executedTxHash
      cancelledTxHash
      blockNumber
      createdAt
      updatedAt
      updatedAtBlock
      updatedAtBlockHash
      data
      inputData
      handler
    }
  }
`,t.GET_ALL_CANCELLED_ORDERS_BY_OWNER=n.gql`
  query getCancelledOrdersByOwner($owner: String) {
    orders(
      first: 1000
      orderBy: updatedAtBlock
      orderDirection: desc
      where: { owner: $owner, status: cancelled }
    ) {
      id
      owner
      inputToken
      outputToken
      minReturn
      module
      witness
      secret
      inputAmount
      vault
      bought
      auxData
      status
      createdTxHash
      executedTxHash
      cancelledTxHash
      blockNumber
      createdAt
      updatedAt
      updatedAtBlock
      updatedAtBlockHash
      data
      inputData
      handler
    }
  }
`,t.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER=n.gql`
  query getOrdersByOwner($owner: String, $module: String) {
    orders(
      first: 1000
      orderBy: updatedAtBlock
      orderDirection: desc
      where: { owner: $owner, module: $module }
    ) {
      id
      owner
      inputToken
      outputToken
      minReturn
      maxReturn
      module
      witness
      secret
      inputAmount
      vault
      bought
      auxData
      status
      createdTxHash
      executedTxHash
      cancelledTxHash
      blockNumber
      createdAt
      updatedAt
      updatedAtBlock
      updatedAtBlockHash
      data
      inputData
      handler
    }
  }
`},40615:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.queryCancelledOrders=t.queryExecutedOrders=t.queryPastOrders=t.queryOpenOrders=t.queryOrders=t.queryOrder=void 0;const n=r(70655),i=r(28687),a=r(89744),s=r(39258);t.queryOrder=(e,t)=>n.__awaiter(void 0,void 0,void 0,(function*(){var r;try{const n=a.OLD_SUBGRAPH_URL[t]?yield(0,i.request)(a.OLD_SUBGRAPH_URL[t],s.GET_ORDER_BY_ID,{id:e.toLowerCase()}):{orders:[]},d=a.SUBGRAPH_URL[t]?yield(0,i.request)(a.SUBGRAPH_URL[t],s.GET_ORDER_BY_ID,{id:e.toLowerCase()}):{orders:[]},u=[...n.orders,...d.orders];return null!==(r=o(u,t).pop())&&void 0!==r?r:null}catch(n){throw new Error("Could not query subgraph for all orders")}}));t.queryOrders=(e,t)=>n.__awaiter(void 0,void 0,void 0,(function*(){try{const r=a.OLD_SUBGRAPH_URL[t]?yield(0,i.request)(a.OLD_SUBGRAPH_URL[t],s.GET_ALL_ORDERS_BY_OWNER,{owner:e.toLowerCase()}):{orders:[]},n=a.SUBGRAPH_URL[t]?yield(0,i.request)(a.SUBGRAPH_URL[t],s.GET_ALL_ORDERS_BY_OWNER,{owner:e.toLowerCase()}):{orders:[]},d=[...r.orders,...n.orders];return o(d,t)}catch(r){throw new Error("Could not query subgraph for all orders")}}));t.queryOpenOrders=(e,t)=>n.__awaiter(void 0,void 0,void 0,(function*(){try{const r=a.OLD_SUBGRAPH_URL[t]?yield(0,i.request)(a.OLD_SUBGRAPH_URL[t],s.GET_ALL_ORDERS_BY_OWNER,{owner:e.toLowerCase()}):{orders:[]},n=a.SUBGRAPH_URL[t]?yield(0,i.request)(a.SUBGRAPH_URL[t],s.GET_ALL_ORDERS_BY_OWNER,{owner:e.toLowerCase()}):{orders:[]},d=[...r.orders,...n.orders];return o(d,t).filter((e=>"open"===e.status))}catch(r){throw new Error("Could not query subgraph for open orders")}}));t.queryPastOrders=(e,t)=>n.__awaiter(void 0,void 0,void 0,(function*(){try{const r=a.OLD_SUBGRAPH_URL[t]?yield(0,i.request)(a.OLD_SUBGRAPH_URL[t],s.GET_ALL_ORDERS_BY_OWNER,{owner:e.toLowerCase()}):{orders:[]},n=a.SUBGRAPH_URL[t]?yield(0,i.request)(a.SUBGRAPH_URL[t],s.GET_ALL_ORDERS_BY_OWNER,{owner:e.toLowerCase()}):{orders:[]},d=[...r.orders,...n.orders];return o(d,t).filter((e=>"open"!==e.status))}catch(r){throw new Error("Could not query subgraph for past orders")}}));t.queryExecutedOrders=(e,t)=>n.__awaiter(void 0,void 0,void 0,(function*(){try{const r=a.OLD_SUBGRAPH_URL[t]?yield(0,i.request)(a.OLD_SUBGRAPH_URL[t],s.GET_ALL_ORDERS_BY_OWNER,{owner:e.toLowerCase()}):{orders:[]},n=a.SUBGRAPH_URL[t]?yield(0,i.request)(a.SUBGRAPH_URL[t],s.GET_ALL_ORDERS_BY_OWNER,{owner:e.toLowerCase()}):{orders:[]},d=[...r.orders,...n.orders];return o(d,t).filter((e=>"executed"===e.status))}catch(r){throw new Error("Could not query subgraph for executed orders")}}));t.queryCancelledOrders=(e,t)=>n.__awaiter(void 0,void 0,void 0,(function*(){try{const r=a.OLD_SUBGRAPH_URL[t]?yield(0,i.request)(a.OLD_SUBGRAPH_URL[t],s.GET_ALL_ORDERS_BY_OWNER,{owner:e.toLowerCase()}):{orders:[]},n=a.SUBGRAPH_URL[t]?yield(0,i.request)(a.SUBGRAPH_URL[t],s.GET_ALL_ORDERS_BY_OWNER,{owner:e.toLowerCase()}):{orders:[]},d=[...r.orders,...n.orders];return o(d,t).filter((e=>"cancelled"===e.status))}catch(r){throw new Error("Could not query subgraph for cancelled orders")}}));const o=(e,t)=>[...new Map(e.map((e=>[e.id,e]))).values()].sort(((e,t)=>parseFloat(e.updatedAt)-parseFloat(t.updatedAt))).filter((e=>e.module!==(e=>a.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[e].toLowerCase())(t))).map((e=>{const t=Date.now()>1e3*(parseInt(e.createdAt)+a.MAX_LIFETIME_IN_SECONDS);return Object.assign(Object.assign({},e),{isExpired:t})}))},73813:function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t._getUniqueOrdersWithExpiry=t.queryPastOrders=t.queryStopLimitCancelledOrders=t.queryStopLimitExecutedOrders=t.queryOpenStopLimitOrders=t.queryStopLimitOrders=void 0;const n=r(70655),i=r(28687),a=r(89744),s=r(39258);t.queryStopLimitOrders=(e,r)=>n.__awaiter(void 0,void 0,void 0,(function*(){try{const n=(a.SUBGRAPH_URL[r]?yield(0,i.request)(a.SUBGRAPH_URL[r],s.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER,{owner:e.toLowerCase(),module:a.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[r].toLowerCase()}):{orders:[]}).orders;return(0,t._getUniqueOrdersWithExpiry)(n)}catch(n){throw console.error(n),new Error("Could not query subgraph for all orders")}}));t.queryOpenStopLimitOrders=(e,r)=>n.__awaiter(void 0,void 0,void 0,(function*(){try{const n=(a.SUBGRAPH_URL[r]?yield(0,i.request)(a.SUBGRAPH_URL[r],s.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER,{owner:e.toLowerCase(),module:a.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[r].toLowerCase()}):{orders:[]}).orders;return(0,t._getUniqueOrdersWithExpiry)(n).filter((e=>"open"===e.status))}catch(n){throw new Error("Could not query subgraph for open orders")}}));t.queryStopLimitExecutedOrders=(e,r)=>n.__awaiter(void 0,void 0,void 0,(function*(){try{const n=(a.SUBGRAPH_URL[r]?yield(0,i.request)(a.SUBGRAPH_URL[r],s.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER,{owner:e.toLowerCase(),module:a.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[r].toLowerCase()}):{orders:[]}).orders;return(0,t._getUniqueOrdersWithExpiry)(n).filter((e=>"executed"===e.status))}catch(n){throw new Error("Could not query subgraph for executed orders")}}));t.queryStopLimitCancelledOrders=(e,r)=>n.__awaiter(void 0,void 0,void 0,(function*(){try{const n=(a.SUBGRAPH_URL[r]?yield(0,i.request)(a.SUBGRAPH_URL[r],s.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER,{owner:e.toLowerCase(),module:a.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[r].toLowerCase()}):{orders:[]}).orders;return(0,t._getUniqueOrdersWithExpiry)(n).filter((e=>"cancelled"===e.status))}catch(n){throw new Error("Could not query subgraph for cancelled orders")}}));t.queryPastOrders=(e,r)=>n.__awaiter(void 0,void 0,void 0,(function*(){try{const n=(a.SUBGRAPH_URL[r]?yield(0,i.request)(a.SUBGRAPH_URL[r],s.GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER,{owner:e.toLowerCase(),module:a.GELATO_STOP_LIMIT_ORDERS_MODULE_ADDRESS[r].toLowerCase()}):{orders:[]}).orders;return(0,t._getUniqueOrdersWithExpiry)(n).filter((e=>"open"!==e.status))}catch(n){throw new Error("Could not query subgraph for past orders")}}));t._getUniqueOrdersWithExpiry=e=>[...new Map(e.map((e=>[e.id,e]))).values()].sort(((e,t)=>parseFloat(e.updatedAt)-parseFloat(t.updatedAt))).map((e=>{const t=Date.now()>1e3*(parseInt(e.createdAt)+a.MAX_LIFETIME_IN_SECONDS);return Object.assign(Object.assign({},e),{isExpired:t})}))}}]);